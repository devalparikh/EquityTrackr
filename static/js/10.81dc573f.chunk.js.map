{"version":3,"sources":["components/Code/sampleCode.txt","components/Datasets/CSVReader2.js","components/Code/CodeEditor.js","components/Buttons/GenerateCodeButton.js","components/Table/DatasetsTable.js","components/Table/FeaturesTable.js","pages/Datasets.js","components/Typography/PageTitle.js","components/Typography/SectionTitle.js"],"names":["module","exports","CSVReader2","updateDataset","SectionTitle","className","onDrop","data","console","log","onError","err","file","inputElem","reason","addRemoveButton","onRemoveFile","CodeEditor","code","value","onValueChange","highlight","languages","py","padding","style","fontFamily","fontSize","width","GenerateCodeButton","generatedCode","handleGenerateCode","layout","onClick","iconRight","GithubIcon","DatasetsTable","checkedFeatures","features","resultsPerPage","onPageChangeTable","pagedDataset","pageTable","title","totalResults","key","map","feature","index","columnArray","colIndex","rowValue","rowIndex","onChange","label","FeaturesTable","updateCheckedFeatures","type","checked","Datasets","useState","setPageTable","dataset","setDataset","setPagedDataset","setFeatures","setCheckedFeatures","setGeneratedCode","length","useEffect","slice","PageTitle","newDataset","parsedData","datapoint","parsedFeatures","reduce","o","i","p","fetch","sampleCode","then","r","text","children"],"mappings":"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","file":"static/js/10.81dc573f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sampleCode.02b8ece6.txt\";","import React from \"react\";\nimport { CSVReader } from \"react-papaparse\";\nimport SectionTitle from \"../Typography/SectionTitle\";\n\nconst CSVReader2 = ({ updateDataset }) => {\n  const handleOnDrop = (data) => {\n    console.log(\"---------------------------\");\n    console.log(data);\n    updateDataset(data);\n    console.log(\"---------------------------\");\n  };\n\n  const handleOnError = (err, file, inputElem, reason) => {\n    console.log(err);\n  };\n\n  const handleOnRemoveFile = (data) => {\n    console.log(\"---------------------------\");\n    console.log(data);\n    updateDataset([]);\n    console.log(\"---------------------------\");\n  };\n\n  return (\n    <>\n      <SectionTitle>Import Dataset</SectionTitle>\n      <div className=\"p-4 mb-8 shadow-2xl rounded-lg h-18 bg-white dark:bg-gray-800 dark:text-white\">\n        <CSVReader\n          onDrop={handleOnDrop}\n          onError={handleOnError}\n          addRemoveButton\n          onRemoveFile={handleOnRemoveFile}\n        >\n          <span>Drop CSV file here or click to upload.</span>\n        </CSVReader>\n      </div>\n    </>\n  );\n};\nexport default CSVReader2;\n","import React from \"react\";\nimport Editor from \"react-simple-code-editor\";\nimport { highlight, languages } from \"prismjs/components/prism-core\";\nimport \"prismjs/components/prism-clike\";\nimport \"prismjs/components/prism-python\";\nimport \"prismjs/themes/prism.css\"; //Example style, you can use another\n\nfunction CodeEditor({ code }) {\n  return (\n    <div className=\"mx-24 my-6 flex bg-gray-100 rounded-lg\">\n      <Editor\n        value={code}\n        onValueChange={(code) => console.log(code)}\n        highlight={(code) => highlight(code, languages.py)}\n        padding={10}\n        style={{\n          fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n          fontSize: 12,\n          width: \"100%\",\n        }}\n      />\n    </div>\n  );\n}\nexport default CodeEditor;\n","import React from \"react\";\nimport { Button } from \"@windmill/react-ui\";\nimport { GithubIcon } from \"../../icons\";\n\nfunction GenerateCodeButton({ generatedCode, handleGenerateCode }) {\n  return (\n    <div className=\"my-6 flex justify-center\">\n      <Button\n        layout={generatedCode ? \"primary\" : \"outline\"}\n        onClick={handleGenerateCode}\n        iconRight={GithubIcon}\n      >\n        Generate Code\n      </Button>\n    </div>\n  );\n}\nexport default GenerateCodeButton;\n","import React from \"react\";\n\nimport {\n  Table,\n  TableHeader,\n  TableCell,\n  TableBody,\n  TableRow,\n  TableFooter,\n  TableContainer,\n  Pagination,\n} from \"@windmill/react-ui\";\n\nimport SectionTitle from \"../Typography/SectionTitle\";\n\nfunction DatasetsTable({\n  checkedFeatures,\n  features,\n  resultsPerPage,\n  onPageChangeTable,\n  pagedDataset,\n  pageTable,\n  title,\n  totalResults,\n}) {\n  return (\n    <>\n      <SectionTitle>{title}</SectionTitle>\n      <TableContainer className=\"mb-8\">\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell key={\"rowNum\"}>#</TableCell>\n\n              {features &&\n                features.map(\n                  (feature, index) =>\n                    checkedFeatures[feature] && (\n                      <TableCell key={index}>{feature}</TableCell>\n                    )\n                )}\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {pagedDataset.map((columnArray, colIndex) => (\n              <TableRow key={colIndex + \"_col\"}>\n                <TableCell className=\"bg-gray-50 dark:bg-gray-700\">\n                  <span\n                    key={colIndex + \"_rowNum\"}\n                    className=\"text-sm text-gray-400\"\n                  >\n                    {colIndex + 1 + (pageTable - 1) * 10}\n                  </span>\n                </TableCell>\n                {columnArray.map(\n                  (rowValue, rowIndex) =>\n                    checkedFeatures[rowIndex] && (\n                      <TableCell>\n                        <span\n                          key={colIndex + \"_\" + rowIndex + \"_row\"}\n                          className=\"text-sm\"\n                        >\n                          {rowValue}\n                        </span>\n                      </TableCell>\n                    )\n                )}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter>\n          <Pagination\n            totalResults={totalResults}\n            resultsPerPage={resultsPerPage}\n            onChange={onPageChangeTable}\n            label=\"Table navigation\"\n          />\n        </TableFooter>\n      </TableContainer>\n    </>\n  );\n}\nexport default DatasetsTable;\n","import React from \"react\";\n\nimport {\n  TableHeader,\n  TableCell,\n  TableContainer,\n  Input,\n} from \"@windmill/react-ui\";\n\nimport SectionTitle from \"../Typography/SectionTitle\";\n\nfunction FeaturesTable({\n  checkedFeatures,\n  features,\n  title,\n  updateCheckedFeatures,\n}) {\n  return (\n    <>\n      <SectionTitle>{title}</SectionTitle>\n      <TableContainer className=\"mb-8 p-4\">\n        <TableHeader>\n          {features.map((feature, index) => (\n            <label className=\"inline-flex items-center\">\n              <Input\n                type=\"checkbox\"\n                checked={checkedFeatures[feature]}\n                onChange={() => updateCheckedFeatures(feature, index)}\n              />\n              <TableCell\n                className={`pl-1 ${\n                  !checkedFeatures[feature] && \"text-gray-400\"\n                }`}\n                key={index}\n              >\n                {feature}\n              </TableCell>\n            </label>\n          ))}\n        </TableHeader>\n      </TableContainer>\n    </>\n  );\n}\nexport default FeaturesTable;\n","import React, { useState, useEffect } from \"react\";\nimport PageTitle from \"../components/Typography/PageTitle\";\n\nimport CSVReader2 from \"../components/Datasets/CSVReader2\";\nimport CodeEditor from \"../components/Code/CodeEditor\";\nimport sampleCode from \"../../src/components/Code/sampleCode.txt\";\nimport GenerateCodeButton from \"../components/Buttons/GenerateCodeButton\";\nimport DatasetsTable from \"../components/Table/DatasetsTable\";\nimport FeaturesTable from \"../components/Table/FeaturesTable\";\n\nfunction Datasets() {\n  const [pageTable, setPageTable] = useState(1);\n\n  const [dataset, setDataset] = useState([]);\n  const [pagedDataset, setPagedDataset] = useState([]);\n\n  const [features, setFeatures] = useState([]);\n  const [checkedFeatures, setCheckedFeatures] = useState({});\n\n  const [generatedCode, setGeneratedCode] = useState(\"\");\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const totalResults = dataset.length - 1;\n\n  // pagination change control\n  function onPageChangeTable(p) {\n    setPageTable(p);\n  }\n\n  // on page change, load new sliced data\n  // here you would make another server request for new data\n  useEffect(() => {\n    setPagedDataset(\n      dataset.slice(\n        (pageTable - 1) * resultsPerPage,\n        pageTable * resultsPerPage\n      )\n    );\n    console.log(\n      dataset.slice(\n        (pageTable - 1) * resultsPerPage,\n        pageTable * resultsPerPage\n      )\n    );\n  }, [pageTable]);\n\n  const updateDataset = (newDataset) => {\n    if (newDataset.length < 1) {\n      setDataset([]);\n      setFeatures([]);\n      setCheckedFeatures({});\n      setPagedDataset([]);\n      return;\n    }\n    const parsedData = newDataset.map((datapoint) => datapoint.data);\n    setDataset(parsedData.slice(1));\n    const parsedFeatures = parsedData[0].reduce(\n      (o, key, i) => ({ ...o, [key]: true, [i]: true }),\n      {}\n    );\n    setFeatures(parsedData[0]);\n    setCheckedFeatures(parsedFeatures);\n    setPagedDataset(parsedData.slice(1, 11));\n  };\n\n  const updateCheckedFeatures = (feature, index) => {\n    console.log({\n      ...checkedFeatures,\n      [feature]: !checkedFeatures[feature],\n      [index]: !checkedFeatures[index],\n    });\n    setCheckedFeatures({\n      ...checkedFeatures,\n      [feature]: !checkedFeatures[feature],\n      [index]: !checkedFeatures[index],\n    });\n  };\n\n  const handleGenerateCode = () => {\n    fetch(sampleCode)\n      .then((r) => r.text())\n      .then((text) => {\n        setGeneratedCode(text);\n      });\n  };\n\n  return (\n    <>\n      <PageTitle>Datasets</PageTitle>\n\n      <CSVReader2 updateDataset={(dataset) => updateDataset(dataset)} />\n\n      {features.length > 0 && (\n        <FeaturesTable\n          checkedFeatures={checkedFeatures}\n          features={features}\n          title={\"Dataset Features\"}\n          updateCheckedFeatures={updateCheckedFeatures}\n        />\n      )}\n\n      {pagedDataset.length > 0 && (\n        <>\n          <DatasetsTable\n            checkedFeatures={checkedFeatures}\n            features={features}\n            resultsPerPage={resultsPerPage}\n            onPageChangeTable={onPageChangeTable}\n            pagedDataset={pagedDataset}\n            pageTable={pageTable}\n            title={\"Filtered Dataset\"}\n            totalResults={totalResults}\n          />\n          <GenerateCodeButton\n            generatedCode={generatedCode}\n            handleGenerateCode={handleGenerateCode}\n          />\n          <CodeEditor code={generatedCode} />\n        </>\n      )}\n    </>\n  );\n}\n\nexport default Datasets;\n","import React from 'react'\n\nfunction PageTitle({ children }) {\n  return (\n    <h1 className=\"my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200\">{children}</h1>\n  )\n}\n\nexport default PageTitle\n","import React from 'react'\n\nfunction SectionTitle({ children }) {\n  return <h2 className=\"mb-4 text-lg font-semibold text-gray-600 dark:text-gray-300\">{children}</h2>\n}\n\nexport default SectionTitle\n"],"sourceRoot":""}